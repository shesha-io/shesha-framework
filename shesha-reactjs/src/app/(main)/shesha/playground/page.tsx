/* eslint-disable no-console */
"use client";

import React, { useState } from 'react';
import { IAjaxResponse, PageWithLayout } from '@/interfaces';
import useSWR from 'swr';
import { ComponentSettingsFile } from './api/filesList/route';
import { Button } from 'antd';
import { useHttpClient } from '@/providers';
import { GENERIC_ENTITIES_ENDPOINT } from '@/shesha-constants';
import qs from 'qs';
import { IAbpWrappedGetEntityListResponse } from '@/interfaces/gql';
import axios from 'axios';
import { FileContentResponse } from './api/fileContent/route';
import { PermissionAutocomplete } from '@/components';

const FORM_CONFIG_ENTITY_TYPE = 'Shesha.Core.FormConfiguration';
const FORM_CONFIG_PROPERTIES = 'id name module { id name } label description versionNo';
const formsModule = 'TestModule';

interface BackendForm {
  id: string;
  name: string;
  label: string;
  description: string;
  versionNo: number;
  module: {
    id: string;
    name: string;
  };
}

interface CreateFormPayload {
  moduleId: string;
  name: string;
  label: string;
  description: string;
}

const Page: PageWithLayout<{}> = () => {
  const fetcher = (url) => fetch(url).then((res) => res.json());

  const { data } = useSWR<ComponentSettingsFile[]>('/shesha/playground/api/filesList', fetcher);

  const httpClient = useHttpClient();

  const getFileAsync = async (fileName: string): Promise<FileContentResponse> => {
    const url = `/shesha/playground/api/fileContent?fileName=${fileName}`;
    const response = await axios.get(url);
    return response.data;
  };

  const importFormAsync = async (formId: string, markup: string) => {
    const payload = new FormData();
    payload.append('itemId', formId);
    payload.append('file', new Blob([markup], { type: 'application/json' }), "markup.json");
    await httpClient.post('/api/services/Shesha/FormConfiguration/ImportJson', payload);
  };

  const createFormAsync = async (payload: CreateFormPayload): Promise<string> => {
    const response = await httpClient.post<IAjaxResponse<{ id: string }>>('/api/services/Shesha/FormConfiguration/Create', payload);
    return response.data.result.id;
  };

  const onCreateFormsClick = async () => {
    if (!data)
      return;
    const payload = {
      skipCount: 0,
      maxResultCount: -1,
      entityType: FORM_CONFIG_ENTITY_TYPE,
      properties: FORM_CONFIG_PROPERTIES,
      quickSearch: null,
      filter: {
        and: [
          { '==': [{ 'var': 'module.name' }, formsModule] },
        ],
      },
      sorting: 'module.name, name',
    };
    const url = `${GENERIC_ENTITIES_ENDPOINT}/GetAll?${qs.stringify(payload)}`;
    const formsResponse = await httpClient.get<IAbpWrappedGetEntityListResponse<BackendForm>>(url);
    const backendForms = formsResponse.data.result?.items ?? [];

    // create forms
    console.log("LOG: process forms...");
    for (const item of data) {
      const backendForm = backendForms.find((form) => form.name === item.componentName);
      let formId = backendForm?.id;
      if (!backendForm) {
        console.log(`LOG: form '${item.componentName}' not found. Creating...`);
        formId = await createFormAsync({
          moduleId: '97C23B22-7A80-411C-BAA3-B5E0BAF64B41',
          name: item.componentName,
          label: item.componentName,
          description: "autogenerated form",
        });
        console.log(`LOG: form '${item.componentName}' created, id: ${formId}`);
      } else {
        console.log(`LOG: form '${item.componentName}' found, id: ${formId}`);
      }

      console.log(`LOG: form '${item.componentName}' fetch markup...`);
      const fileResponse = await getFileAsync(item.fileName);

      if (fileResponse.exists) {
        console.log(`LOG: form '${item.componentName}' fetch markup - success`);

        console.log(`LOG: form '${item.componentName}' import markup...`);
        await importFormAsync(formId, fileResponse.content);
        console.log(`LOG: form '${item.componentName}' import markup - success`);
      } else
        console.log(`LOG: form '${item.componentName}' fetch markup - failed`);
    }
    console.log("LOG: process forms - success");
  };

  const [permission, setPermission] = useState<string[]>();

  return (
        <div>
            <PermissionAutocomplete value={permission} onChange={setPermission} readOnly={false} />
            <h2>Components with JSON settings: </h2>
            {!data && "Loading..."}

            {data && (
                <>
                    <Button onClick={onCreateFormsClick}>Create forms</Button>
                    <ul>
                        {data.map((file) => (
                            <li key={file.componentName}>{file.componentName}</li>
                        ))}
                    </ul>
                </>
            )}
        </div>
  );
};

export default Page;
