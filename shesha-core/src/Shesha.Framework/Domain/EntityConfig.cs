using Shesha.Domain.Attributes;
using Shesha.Domain.Constants;
using Shesha.Domain.Enums;
using Shesha.DynamicEntities.Dtos;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Shesha.Domain
{
    /// <summary>
    /// Entity configuration
    /// </summary>
    [Entity(
        FriendlyName = "Entity",
        TypeShortAlias = "Shesha.Framework.EntityConfig", 
        GenerateApplicationService = GenerateApplicationServiceState.DisableGenerateApplicationService
    )]
    [JoinedProperty("entity_configs", Schema = "frwk")]
    [FixedView(ConfigurationItemsViews.Create, SheshaFrameworkModule.ModuleName, "cs-entity-create")]
    [SnakeCaseNaming]
    [DiscriminatorValue(ItemTypeName)]
    public class EntityConfig : ConfigurationItem
    {
        public const string ItemTypeName = "entity";
        public override string ItemType => ItemTypeName;

        public EntityConfig()
        {
        }

        public virtual EntityConfig? InheritedFrom { get; set; }

        public virtual bool CreatedInDb { get; set; }

        public virtual string? IdColumn { get; set; }

        [MaxLength(255)]
        public virtual string? SchemaName { get; set; }

        [MaxLength(255)]
        public virtual string? TableName { get; set; }

        [MaxLength(500)]
        public virtual string ClassName { get; set; }
        [MaxLength(500)]
        public virtual string? Namespace { get; set; }
        [MaxLength(255)]
        public virtual string? DiscriminatorValue { get; set; }

        public virtual EntityConfigTypes? EntityConfigType { get; set; } = EntityConfigTypes.Class;

        [NotMapped]
        public virtual string FullClassName => $"{Namespace}.{ClassName}";

        [MaxLength(100)]
        public virtual string? TypeShortAlias { get; set; }

        /// <summary>
        /// MD5 hash of the hardcoded properties, is used for performance optimization of the bootstrapper
        /// </summary>
        [MaxLength(40)]
        [Column("properties_md5")]
        public virtual string? HardcodedPropertiesMD5 { get; set; }

        /// <summary>
        /// View configurations
        /// </summary>
        [SaveAsJson]
        public virtual List<EntityViewConfigurationDto> ViewConfigurations { get; set; } = new List<EntityViewConfigurationDto>();

        /// <summary>
        /// If true, indicates that application services should be generated by the application automatically
        /// </summary>
        public virtual bool GenerateAppService { get; set; }

        /// <summary>
        /// Source of the entity (code/user)
        /// </summary>
        public virtual MetadataSourceType Source { get; set; } = MetadataSourceType.UserDefined; // set to user-defined by default, `ApplicationCode` is used in the bootstrapper only

        /// <summary>
        /// Code identifier that can be used in the client-side code to reference current module
        /// </summary>
        [MaxLength(200)]
        public virtual string? Accessor { get; set; }

        public override string ToString()
        {
            return FullClassName;
        }
    }
}